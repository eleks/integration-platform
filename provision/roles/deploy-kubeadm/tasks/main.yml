---
- name: swapoff
  shell: "swapoff -a"

# Disable SELinux
- name: Disable SELinux
  selinux:
    state: disabled

- name:  Disable SELinux w/o reboot
  shell: setenforce 0

- name: install docker
  yum:
    name: docker
    state: latest

- name: set private docker registry config for docker
  lineinfile:
    name: /usr/lib/systemd/system/docker.service
    insertafter: ExecStart=/usr/bin/dockerd-current
    line: '          --insecure-registry platform-registry:5000 \'

- name: update hosts for resolving private registry
  shell: echo "192.168.22.20 platform-registry" >> /etc/hosts

- name: reload daemon
  shell: systemctl daemon-reload

- name: enable and start docker
  service: 
    name: docker
    state: started
    enabled: yes

- name: set kubernetes repo
  shell:
    cmd: |
      cat <<EOF > /etc/yum.repos.d/kubernetes.repo
      [kubernetes]
      name=Kubernetes
      baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      enabled=1
      gpgcheck=1
      repo_gpgcheck=1
      gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      EOF

- name: install kubelet
  yum: 
    name: kubelet
    state: latest

- name: install kubeadm
  yum: 
    name: kubeadm
    state: latest

- name: install kubectl
  yum: 
    name: kubectl
    state: latest

- name: start kubelet
  service: 
    name: kubelet
    state: started
    enabled: yes

- name: set correct iptables rule
  shell:
    cmd: |
      cat <<EOF >  /etc/sysctl.d/k8s.conf
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      EOF

- name: sysctl net.bridge
  shell: sysctl net.bridge.bridge-nf-call-iptables=1

- name: sysctl --system
  shell: sysctl --system

- name: Pull kubernetes system images
  command: kubeadm config images pull

- name: kubeadm init
  when: inventory_hostname in groups["role=controller"]
  command: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-cert-extra-sans={{ elb_dns }}
  register: result

- name: make kubectl working
  when: inventory_hostname in groups["role=controller"]
  shell: mkdir -p $HOME/.kube && cp -i /etc/kubernetes/admin.conf $HOME/.kube/config && chown $(id -u):$(id -g) $HOME/.kube/config
  become: yes
  
#- name: install weave network
#  when: inventory_hostname in groups["role=controller"]
#  shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

- name: install flannel network
  when: inventory_hostname in groups["role=controller"]
  command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml

- name: delay for dns
  when: inventory_hostname in groups["role=controller"]
  shell: sleep 120
  args:
    executable: /bin/bash
    
# here you should put hostname of master node
# TODO: bad solution to catch stdout from `kubeadm init` need to redefine
- name: join nodes to kubernetes cluster 
  when: inventory_hostname in groups["role=minion"]
  #shell: " {{ hostvars[local_env+'-master-01']['result']['stdout_lines'][-1] }} "
  shell: " {{ hostvars[local_env+'-master-01']['result']['stdout_lines'][-2:]|join(' ')|regex_replace('[\\\\]', '') }} "

- name: delay for join nodes
  pause: 
    minutes: 1

#- name: fix coredns bug
#  when: inventory_hostname in groups["role=controller"]
#  shell: "kubectl -n kube-system get deployment coredns -o yaml |  sed 's/allowPrivilegeEscalation: false/allowPrivilegeEscalation: true/g' |  kubectl apply -f -"

- include: kubectl-user.yml
  when: inventory_hostname in groups["role=controller"]
  tags:
    - kubectl-user

# Prepare predefined user and token
- name: put auth file
  when: inventory_hostname in groups["role=controller"]
  template:
    src: templates/auth.csv.j2
    dest: /etc/kubernetes/pki/auth.csv
    
- name: modify apiserver
  when: inventory_hostname in groups["role=controller"]
  lineinfile:
    name: /etc/kubernetes/manifests/kube-apiserver.yaml
    insertafter: '    - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key'
    line: '    - --token-auth-file=/etc/kubernetes/pki/auth.csv'
    state: present
  notify: Restart kubelet

- name: delay after kube-apiserver modifications
  pause: 
    minutes: 1

- name: rbac for predifined user
  when: inventory_hostname in groups["role=controller"]
  copy:
    src: "files/rbac.yaml"
    dest: "/home/{{ ansible_user }}/rbac.yaml"
    mode: 0644
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Apply rbac
  when: inventory_hostname in groups["role=controller"]
  shell: "kubectl apply -f /home/{{ ansible_user }}/rbac.yaml"